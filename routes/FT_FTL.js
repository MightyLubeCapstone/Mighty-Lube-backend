const express = require("express");
const { dbConnect } = require("../config/config");
const { authenticate } = require("./sessions");
const FT_FTL = require("../models/FT_FTL");
const templateA = require("../models/templateA");
const templateE = require("../models/templateE");

const router = express.Router();

router.post("/", authenticate, async (req, res) => {
  try {
    const { FT_FTLData, numRequested } = req.body;
    const order = new FT_FTL({
      conveyorName: FT_FTLData.conveyorName,
      chainSize: FT_FTLData.chainSize,
      ...(FT_FTLData.otherChainSize && { otherChainSize: FT_FTLData.otherChainSize }),
      industrialChainManufacturer: FT_FTLData.industrialChainManufacturer,
      ...(FT_FTLData.otherChainManufacturer && { otherChainManufacturer: FT_FTLData.otherChainManufacturer }),
      wheelManufacturer: FT_FTLData.wheelManufacturer,
      ...(FT_FTLData.otherWheelManufacturer && { otherWheelManufacturer: FT_FTLData.otherWheelManufacturer }),
      conveyorLength: FT_FTLData.conveyorLength,
      conveyorLengthUnit: FT_FTLData.conveyorLengthUnit,
      conveyorSpeed: FT_FTLData.conveyorSpeed,
      speedUnit: FT_FTLData.speedUnit,
      ...(FT_FTLData.conveyorIndex && { conveyorIndex: FT_FTLData.conveyorIndex }),
      ...(FT_FTLData.travelDirection && { travelDirection: FT_FTLData.travelDirection }),
      appEnviroment: FT_FTLData.appEnviroment,
      ...(FT_FTLData.otherAppEnviroment && { otherAppEnviroment: FT_FTLData.otherAppEnviroment }),
      ...(FT_FTLData.ovenStatus && { ovenStatus: FT_FTLData.ovenStatus }),
      ...(FT_FTLData.ovenTemp && { ovenTemp: FT_FTLData.ovenTemp }),
      strandStatus: FT_FTLData.strandStatus,
      ...(FT_FTLData.surroundingTemp && { surroundingTemp: FT_FTLData.surroundingTemp }),
      conveyorLoaded: FT_FTLData.conveyorLoaded,
      ...(FT_FTLData.conveyorSwing && { conveyorSwing: FT_FTLData.conveyorSwing }),
      ...(FT_FTLData.plantLayout && { plantLayout: FT_FTLData.plantLayout }),
      ...(FT_FTLData.requiredPics && { requiredPics: FT_FTLData.requiredPics }),
      operatingVoltage: FT_FTLData.operatingVoltage,
      existingMonitor: FT_FTLData.existingMonitor,
      newMonitor: FT_FTLData.newMonitor,
      monitorData: {
        ...(FT_FTLData.dcuStatus && { dcuStatus: FT_FTLData.dcuStatus }),
        ...(FT_FTLData.dcuNum && { dcuNum: FT_FTLData.dcuNum }),
        ...(FT_FTLData.existingWindows && { existingWindows: FT_FTLData.existingWindows }),
        ...(FT_FTLData.existingHeadUnit && { existingHeadUnit: FT_FTLData.existingHeadUnit }),
        ...(FT_FTLData.existingDCU && { existingDCU: FT_FTLData.existingDCU }),
        ...(FT_FTLData.existingPowerInterface && { existingPowerInterface: FT_FTLData.existingPowerInterface }),
        ...(FT_FTLData.newReservoir && { newReservoir: FT_FTLData.newReservoir }),
        ...(FT_FTLData.reservoirSize && { reservoirSize: FT_FTLData.reservoirSize }),
        ...(FT_FTLData.otherReservoirSize && { otherReservoirSize: FT_FTLData.otherReservoirSize }),
        ...(FT_FTLData.newReservoirNum && { newReservoirNum: FT_FTLData.newReservoirNum }),
        ...(FT_FTLData.typeMonitor && { typeMonitor: FT_FTLData.typeMonitor }),
        ...(FT_FTLData.driveMotorAmp && { driveMotorAmp: FT_FTLData.driveMotorAmp }),
        ...(FT_FTLData.driveMotorAmpNum && { driveMotorAmpNum: FT_FTLData.driveMotorAmpNum }),
        ...(FT_FTLData.driveTakeUpAir && { driveTakeUpAir: FT_FTLData.driveTakeUpAir }),
        ...(FT_FTLData.driveTakeUpAirNum && { driveTakeUpAirNum: FT_FTLData.driveTakeUpAirNum }),
        ...(FT_FTLData.takeUpDistance && { takeUpDistance: FT_FTLData.takeUpDistance }),
        ...(FT_FTLData.takeUpDistanceNum && { takeUpDistanceNum: FT_FTLData.takeUpDistanceNum }),
        ...(FT_FTLData.driveTemp && { driveTemp: FT_FTLData.driveTemp }),
        ...(FT_FTLData.driveTempNum && { driveTempNum: FT_FTLData.driveTempNum }),
        ...(FT_FTLData.driveVibration && { driveVibration: FT_FTLData.driveVibration }),
        ...(FT_FTLData.driveVibrationNum && { driveVibrationNum: FT_FTLData.driveVibrationNum }),
        ...(FT_FTLData.dogPitch && { dogPitch: FT_FTLData.dogPitch }),
        ...(FT_FTLData.dogPitchNum && { dogPitchNum: FT_FTLData.dogPitchNum }),
        ...(FT_FTLData.paintMarker && { paintMarker: FT_FTLData.paintMarker }),
        ...(FT_FTLData.paintMarkerNum && { paintMarkerNum: FT_FTLData.paintMarkerNum }),
        ...(FT_FTLData.chainVision && { chainVision: FT_FTLData.chainVision }),
        ...(FT_FTLData.lubeVision && { lubeVision: FT_FTLData.lubeVision }),
        ...(FT_FTLData.trolleyVision && { trolleyVision: FT_FTLData.trolleyVision }),
        ...(FT_FTLData.trolleyDetect && { trolleyDetect: FT_FTLData.trolleyDetect }),
        ...(FT_FTLData.omniView && { omniView: FT_FTLData.omniView }),
        ...(FT_FTLData.dcuUpgradeNum && { dcuUpgradeNum: FT_FTLData.dcuUpgradeNum }),
        ...(FT_FTLData.itNameOne && { itNameOne: FT_FTLData.itNameOne }),
        ...(FT_FTLData.itIPOne && { itIPOne: FT_FTLData.itIPOne }),
        ...(FT_FTLData.itGatewayOne && { itGatewayOne: FT_FTLData.itGatewayOne }),
        ...(FT_FTLData.itSubnetOne && { itSubnetOne: FT_FTLData.itSubnetOne }),
        ...(FT_FTLData.itDNSOne && { itDNSOne: FT_FTLData.itDNSOne }),
        ...(FT_FTLData.itSMTPOne && { itSMTPOne: FT_FTLData.itSMTPOne }),
        ...(FT_FTLData.itNameTwo && { itNameTwo: FT_FTLData.itNameTwo }),
        ...(FT_FTLData.itIPTwo && { itIPTwo: FT_FTLData.itIPTwo }),
        ...(FT_FTLData.itGatewayTwo && { itGatewayTwo: FT_FTLData.itGatewayTwo }),
        ...(FT_FTLData.itSubnetTwo && { itSubnetTwo: FT_FTLData.itSubnetTwo }),
        ...(FT_FTLData.itDNSTwo && { itDNSTwo: FT_FTLData.itDNSTwo }),
        ...(FT_FTLData.itSMTPTwo && { itSMTPTwo: FT_FTLData.itSMTPTwo }),
        ...(FT_FTLData.itNameThree && { itNameThree: FT_FTLData.itNameThree }),
        ...(FT_FTLData.itIPThree && { itIPThree: FT_FTLData.itIPThree }),
        ...(FT_FTLData.itGatewayThree && { itGatewayThree: FT_FTLData.itGatewayThree }),
        ...(FT_FTLData.itSubnetThree && { itSubnetThree: FT_FTLData.itSubnetThree }),
        ...(FT_FTLData.itDNSThree && { itDNSThree: FT_FTLData.itDNSThree }),
        ...(FT_FTLData.itSMTPThree && { itSMTPThree: FT_FTLData.itSMTPThree }),
        ...(FT_FTLData.itAdditionalNotes && { itAdditionalNotes: FT_FTLData.itAdditionalNotes }),
        ...(FT_FTLData.piuDistance && { piuDistance: FT_FTLData.piuDistance }),
        ...(FT_FTLData.switchDistance && { switchDistance: FT_FTLData.switchDistance }),
        ...(FT_FTLData.ampPickup && { ampPickup: FT_FTLData.ampPickup }),
        ...(FT_FTLData.fromAirTakeUpDistance && { fromAirTakeUpDistance: FT_FTLData.fromAirTakeUpDistance }),
        ...(FT_FTLData.specialControllerOptions && { specialControllerOptions: FT_FTLData.specialControllerOptions }),
        ...(FT_FTLData.operatingVoltage && { operatingVoltage: FT_FTLData.operatingVoltage })
      },
      wheelOpenType: FT_FTLData.wheelOpenType,
      ...(FT_FTLData.wheelClosedType && { wheelClosedType: FT_FTLData.wheelClosedType }),
      openStatus: FT_FTLData.openStatus,
      outBoardStatus: FT_FTLData.outBoardStatus,
      catDriveStatus: FT_FTLData.catDriveStatus,
      templateEData: {
          conveyorName: COE_CELData.conveyorName,
          chainSize: COE_CELData.chainSize,
          ...(COE_CELData.otherChainSize && { otherChainSize: COE_CELData.otherChainSize }),
          ...(COE_CELData.industrialChainManufacturer && { industrialChainManufacturer: COE_CELData.industrialChainManufacturer }),
          ...(COE_CELData.otherChainManufacturer && { otherChainManufacturer: COE_CELData.otherChainManufacturer }),
          ...(COE_CELData.conveyorLength && { conveyorLength: COE_CELData.conveyorLength }),
          ...(COE_CELData.conveyorLengthUnit && { conveyorLengthUnit: COE_CELData.conveyorLengthUnit }),
          ...(COE_CELData.appEnviroment && { appEnviroment: COE_CELData.appEnviroment }),
          ...(COE_CELData.otherAppEnviroment && { otherAppEnviroment: COE_CELData.otherAppEnviroment }),
          ...(COE_CELData.lubeBrand && { lubeBrand: COE_CELData.lubeBrand }),
          ...(COE_CELData.lubeType && { lubeType: COE_CELData.lubeType }),
          ...(COE_CELData.lubeViscosity && { lubeViscosity: COE_CELData.lubeViscosity }),
          ...(COE_CELData.specialControllerOptions && { specialControllerOptions: COE_CELData.specialControllerOptions }),
          ...(COE_CELData.wireMeasurementUnit && { wireMeasurementUnit: COE_CELData.wireMeasurementUnit }),
          ...(COE_CELData.conductor2 && { conductor2: COE_CELData.conductor2 }),
          ...(COE_CELData.conductor4 && { conductor4: COE_CELData.conductor4 }),
          ...(COE_CELData.conductor7 && { conductor7: COE_CELData.conductor7 }),
          ...(COE_CELData.conductor12 && { conductor12: COE_CELData.conductor12 }),
          ...(COE_CELData.junctionBoxNum && { junctionBoxNum: COE_CELData.junctionBoxNum }),

      },      
      ...(FT_FTLData.externalLubeStatus && { externalLubeStatus: FT_FTLData.externalLubeStatus }),
      ...(FT_FTLData.lubeBrand && { lubeBrand: FT_FTLData.lubeBrand }),
      ...(FT_FTLData.lubeType && { lubeType: FT_FTLData.lubeType }),
      ...(FT_FTLData.lubeViscosity && { lubeViscosity: FT_FTLData.lubeViscosity }),
      ...(FT_FTLData.reservoirSize && { reservoirSize: FT_FTLData.reservoirSize }),
      ...(FT_FTLData.reservoirSizeNum && { reservoirSizeNum: FT_FTLData.reservoirSizeNum }),
      ...(FT_FTLData.chainCleanStatus && { chainCleanStatus: FT_FTLData.chainCleanStatus }),
      ...(FT_FTLData.mightyLubeMonitoring && { mightyLubeMonitoring: FT_FTLData.mightyLubeMonitoring }),
      ...(FT_FTLData.ctrController && { ctrController: FT_FTLData.ctrController }),
      ...(FT_FTLData.plcConnection && { plcConnection: FT_FTLData.plcConnection }),
      ...(FT_FTLData.monitoringController && { monitoringController: FT_FTLData.monitoringController }),
      ...(FT_FTLData.otherControllerInfo && { otherControllerInfo: FT_FTLData.otherControllerInfo }),
      ...(FT_FTLData.specialControllerOptions && { specialControllerOptions: FT_FTLData.specialControllerOptions }),
      ...(FT_FTLData.measurementUnitType && { measurementUnitType: FT_FTLData.measurementUnitType }),
      ...(FT_FTLData.powerRailG && { powerRailG: FT_FTLData.powerRailG }),
      ...(FT_FTLData.powerRailH && { powerRailH: FT_FTLData.powerRailH }),
      ...(FT_FTLData.powerRailA1 && { powerRailA1: FT_FTLData.powerRailA1 }),
      ...(FT_FTLData.powerRailB1 && { powerRailB1: FT_FTLData.powerRailB1 }),
      ...(FT_FTLData.powerRailH1 && { powerRailH1: FT_FTLData.powerRailH1 }),
      ...(FT_FTLData.powerRailJ1 && { powerRailJ1: FT_FTLData.powerRailJ1 }),
      ...(FT_FTLData.powerRailL1 && { powerRailL1: FT_FTLData.powerRailL1 }),
      ...(FT_FTLData.powerRailM1 && { powerRailM1: FT_FTLData.powerRailM1 }),
      ...(FT_FTLData.powerRailN1 && { powerRailN1: FT_FTLData.powerRailN1 }),
      ...(FT_FTLData.powerRailP1 && { powerRailP1: FT_FTLData.powerRailP1 }),
      ...(FT_FTLData.powerRailR1 && { powerRailR1: FT_FTLData.powerRailR1 }),
      ...(FT_FTLData.wireMeasurementUnit && { wireMeasurementUnit: FT_FTLData.wireMeasurementUnit }),
      ...(FT_FTLData.conductor2 && { conductor2: FT_FTLData.conductor2 }),
      ...(FT_FTLData.conductor4 && { conductor4: FT_FTLData.conductor4 }),
      ...(FT_FTLData.conductor7 && { conductor7: FT_FTLData.conductor7 }),
      ...(FT_FTLData.conductor12 && { conductor12: FT_FTLData.conductor12 }),
      ...(FT_FTLData.junctionBoxNum && { junctionBoxNum: FT_FTLData.junctionBoxNum })
    });

    req.user.cart.push({ numRequested, productConfigurationInfo: order, productType: "FT_FTL" });
    await req.user.save();

    return res.status(200).json({ message: "FT_FTL entry added" });
  } catch (error) {
    console.log(error);
    res.status(500).json({ error: "Internal server error" });
  }
});

module.exports = router;
